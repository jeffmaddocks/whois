2021-05-05,08:58:41 [INFO] (app.py:app:242): Parsing config file /home/jeff/dev/whois/env/lib/python3.8/site-packages/tabpy/tabpy_server/app/../common/default.conf
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter port set to "9004" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter server_version set to "2.3.1" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter evaluate_timeout set to "30" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter upload_dir set to "/home/jeff/dev/whois/env/lib/python3.8/site-packages/tabpy/tmp/query_objects" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter transfer_protocol set to "http" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:210): Parameter certificate_file is not set
2021-05-05,08:58:41 [DEBUG] (app.py:app:210): Parameter key_file is not set
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter state_file_path set to "/home/jeff/dev/whois/env/lib/python3.8/site-packages/tabpy/tabpy_server" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter static_path set to "/home/jeff/dev/whois/env/lib/python3.8/site-packages/tabpy/tabpy_server/static" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:210): Parameter TABPY_PWD_FILE is not set
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter log_request_context set to "false" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:203): Parameter max_request_size_in_mb set to "100" from default value
2021-05-05,08:58:41 [DEBUG] (app.py:app:425): File /home/jeff/dev/whois/env/lib/python3.8/site-packages/tabpy/tabpy_server/state.ini not found, creating from template /home/jeff/dev/whois/env/lib/python3.8/site-packages/tabpy/tabpy_server/state.ini.template...
2021-05-05,08:58:41 [INFO] (app.py:app:431): Loading state from state file /home/jeff/dev/whois/env/lib/python3.8/site-packages/tabpy/tabpy_server/state.ini
2021-05-05,08:58:41 [DEBUG] (app.py:app:309): Static pages folder set to "/home/jeff/dev/whois/env/lib/python3.8/site-packages/tabpy/tabpy_server/static"
2021-05-05,08:58:41 [INFO] (app.py:app:328): Password file is not specified: Authentication is not enabled
2021-05-05,08:58:41 [INFO] (app.py:app:343): Call context logging is disabled
2021-05-05,08:58:41 [INFO] (app.py:app:124): Initializing TabPy...
2021-05-05,08:58:41 [DEBUG] (selector_events.py:selector_events:59): Using selector: EpollSelector
2021-05-05,08:58:41 [INFO] (callbacks.py:callbacks:43): Initializing TabPy Server...
2021-05-05,08:58:41 [DEBUG] (state.py:state:613): Loading option 'None' from section [Query Objects Service Versions]...
2021-05-05,08:58:41 [DEBUG] (state.py:state:635): Returning value '[]'
2021-05-05,08:58:41 [DEBUG] (state.py:state:148): Collected endpoints: {}
2021-05-05,08:58:41 [INFO] (app.py:app:128): Done initializing TabPy.
2021-05-05,08:58:41 [INFO] (app.py:app:82): Setting max request size to 104857600 bytes
2021-05-05,08:58:41 [INFO] (callbacks.py:callbacks:64): Initializing models...
2021-05-05,08:58:41 [DEBUG] (state.py:state:613): Loading option 'None' from section [Query Objects Service Versions]...
2021-05-05,08:58:41 [DEBUG] (state.py:state:635): Returning value '[]'
2021-05-05,08:58:41 [DEBUG] (state.py:state:148): Collected endpoints: {}
2021-05-05,08:58:41 [INFO] (app.py:app:105): Web service listening on port 9004
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:00:18 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:00:18 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:00:18 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:00:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:00:18 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:00:18 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:00:18 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'2847e2b3-17b1-45fd-bdc5-cb15dc63ee35\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    import whois\n    t = \'ip, org, name, domain_name, address, city, state, zipcode, country\\n\'\n\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        print(s)\n        t = t + s\n    return t\n\nif __name__ == "__main__":\n    import pandas as pd\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    g.write(runwhois(df))\n    g.close()\ndef get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2021-05-05,09:00:18 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '2847e2b3-17b1-45fd-bdc5-cb15dc63ee35'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     import whois
     t = 'ip, org, name, domain_name, address, city, state, zipcode, country\n'
 
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         print(s)
         t = t + s
     return t
 
 if __name__ == "__main__":
     import pandas as pd
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     g.write(runwhois(df))
     g.close()
 def get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:00:18 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:00:18 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:00:18 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:00:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:00:18 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:00:18 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:00:18 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:18 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'2847e2b3-17b1-45fd-bdc5-cb15dc63ee35\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    import whois\n    t = \'ip, org, name, domain_name, address, city, state, zipcode, country\\n\'\n\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        print(s)\n        t = t + s\n    return t\n\nif __name__ == "__main__":\n    import pandas as pd\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    g.write(runwhois(df))\n    g.close()\ndef get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2021-05-05,09:00:18 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '2847e2b3-17b1-45fd-bdc5-cb15dc63ee35'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     import whois
     t = 'ip, org, name, domain_name, address, city, state, zipcode, country\n'
 
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         print(s)
         t = t + s
     return t
 
 if __name__ == "__main__":
     import pandas as pd
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     g.write(runwhois(df))
     g.close()
 def get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2021-05-05,09:00:19 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 949.47ms
2021-05-05,09:00:19 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 965.98ms
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:00:19 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'2847e2b3-17b1-45fd-bdc5-cb15dc63ee35\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    import whois\n    t = \'ip, org, name, domain_name, address, city, state, zipcode, country\\n\'\n\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        print(s)\n        t = t + s\n    return t\n\nif __name__ == "__main__":\n    import pandas as pd\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    g.write(runwhois(df))\n    g.close()\ndef get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '2847e2b3-17b1-45fd-bdc5-cb15dc63ee35'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     import whois
     t = 'ip, org, name, domain_name, address, city, state, zipcode, country\n'
 
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         print(s)
         t = t + s
     return t
 
 if __name__ == "__main__":
     import pandas as pd
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     g.write(runwhois(df))
     g.close()
 def get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2021-05-05,09:00:19 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'2847e2b3-17b1-45fd-bdc5-cb15dc63ee35\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    import whois\n    t = \'ip, org, name, domain_name, address, city, state, zipcode, country\\n\'\n\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        print(s)\n        t = t + s\n    return t\n\nif __name__ == "__main__":\n    import pandas as pd\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    g.write(runwhois(df))\n    g.close()\ndef get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '2847e2b3-17b1-45fd-bdc5-cb15dc63ee35'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     import whois
     t = 'ip, org, name, domain_name, address, city, state, zipcode, country\n'
 
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         print(s)
         t = t + s
     return t
 
 if __name__ == "__main__":
     import pandas as pd
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     g.write(runwhois(df))
     g.close()
 def get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2021-05-05,09:00:19 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 39.88ms
2021-05-05,09:00:19 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 37.17ms
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:00:19 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:00:19 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:00:19 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['23.66.114.201', '45.33.23.183', '45.60.44.73']}}, 'script': 'import pandas as pd\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    import whois\n    t = \'ip, org, name, domain_name, address, city, state, zipcode, country\\n\'\n\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        print(s)\n        t = t + s\n    return t\n\nif __name__ == "__main__":\n    import pandas as pd\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    g.write(runwhois(df))\n    g.close()\nexecution_result = runwhois(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2021-05-05,09:00:19 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     import whois
     t = 'ip, org, name, domain_name, address, city, state, zipcode, country\n'
 
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         print(s)
         t = t + s
     return t
 
 if __name__ == "__main__":
     import pandas as pd
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     g.write(runwhois(df))
     g.close()
 execution_result = runwhois(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2021-05-05,09:00:22 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 2292.35ms
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:32:05 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'2847e2b3-17b1-45fd-bdc5-cb15dc63ee35\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport pandas as pd\nimport whois\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    df_final = pd.DataFrame(columns = [\'ip\', \'org\', \'name\', \'domain_name\', \'address\', \'city\', \'state\', \'zipcode\', \'country\'])\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        # s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        # data = [[\'ip\', str(x[0])], [\'org\', str(arlookup[\'org\'])], [\'name\', str(arlookup[\'name\'])], [\'domain_name\', str(arlookup[\'domain_name\'])], [\'address\', str(arlookup[\'address\'])], [\'city\', str(arlookup[\'city\'])], [\'state\', str(arlookup[\'state\'])], [\'zipcode\', str(arlookup[\'zipcode\'])], [\'country\', str(arlookup[\'country\'])]]\n        data = [str(x[0]), str(arlookup[\'org\']), str(arlookup[\'name\']), str(arlookup[\'domain_name\']), str(arlookup[\'address\']), str(arlookup[\'city\']), str(arlookup[\'state\']), str(arlookup[\'zipcode\']), str(arlookup[\'country\'])]\n        df_final.loc[index] = data\n    return df_final\n\nif __name__ == "__main__":\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    df_final = runwhois(df)\n    g.write(df_final.to_csv(index=False))\n    g.close()\ndef get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '2847e2b3-17b1-45fd-bdc5-cb15dc63ee35'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import pandas as pd
 import whois
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     df_final = pd.DataFrame(columns = ['ip', 'org', 'name', 'domain_name', 'address', 'city', 'state', 'zipcode', 'country'])
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         # s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         # data = [['ip', str(x[0])], ['org', str(arlookup['org'])], ['name', str(arlookup['name'])], ['domain_name', str(arlookup['domain_name'])], ['address', str(arlookup['address'])], ['city', str(arlookup['city'])], ['state', str(arlookup['state'])], ['zipcode', str(arlookup['zipcode'])], ['country', str(arlookup['country'])]]
         data = [str(x[0]), str(arlookup['org']), str(arlookup['name']), str(arlookup['domain_name']), str(arlookup['address']), str(arlookup['city']), str(arlookup['state']), str(arlookup['zipcode']), str(arlookup['country'])]
         df_final.loc[index] = data
     return df_final
 
 if __name__ == "__main__":
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     df_final = runwhois(df)
     g.write(df_final.to_csv(index=False))
     g.close()
 def get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2021-05-05,09:32:05 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 18.64ms
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:32:05 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'2847e2b3-17b1-45fd-bdc5-cb15dc63ee35\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport pandas as pd\nimport whois\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    df_final = pd.DataFrame(columns = [\'ip\', \'org\', \'name\', \'domain_name\', \'address\', \'city\', \'state\', \'zipcode\', \'country\'])\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        # s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        # data = [[\'ip\', str(x[0])], [\'org\', str(arlookup[\'org\'])], [\'name\', str(arlookup[\'name\'])], [\'domain_name\', str(arlookup[\'domain_name\'])], [\'address\', str(arlookup[\'address\'])], [\'city\', str(arlookup[\'city\'])], [\'state\', str(arlookup[\'state\'])], [\'zipcode\', str(arlookup[\'zipcode\'])], [\'country\', str(arlookup[\'country\'])]]\n        data = [str(x[0]), str(arlookup[\'org\']), str(arlookup[\'name\']), str(arlookup[\'domain_name\']), str(arlookup[\'address\']), str(arlookup[\'city\']), str(arlookup[\'state\']), str(arlookup[\'zipcode\']), str(arlookup[\'country\'])]\n        df_final.loc[index] = data\n    return df_final\n\nif __name__ == "__main__":\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    df_final = runwhois(df)\n    g.write(df_final.to_csv(index=False))\n    g.close()\ndef get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '2847e2b3-17b1-45fd-bdc5-cb15dc63ee35'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import pandas as pd
 import whois
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     df_final = pd.DataFrame(columns = ['ip', 'org', 'name', 'domain_name', 'address', 'city', 'state', 'zipcode', 'country'])
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         # s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         # data = [['ip', str(x[0])], ['org', str(arlookup['org'])], ['name', str(arlookup['name'])], ['domain_name', str(arlookup['domain_name'])], ['address', str(arlookup['address'])], ['city', str(arlookup['city'])], ['state', str(arlookup['state'])], ['zipcode', str(arlookup['zipcode'])], ['country', str(arlookup['country'])]]
         data = [str(x[0]), str(arlookup['org']), str(arlookup['name']), str(arlookup['domain_name']), str(arlookup['address']), str(arlookup['city']), str(arlookup['state']), str(arlookup['zipcode']), str(arlookup['country'])]
         df_final.loc[index] = data
     return df_final
 
 if __name__ == "__main__":
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     df_final = runwhois(df)
     g.write(df_final.to_csv(index=False))
     g.close()
 def get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:32:05 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'2847e2b3-17b1-45fd-bdc5-cb15dc63ee35\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport pandas as pd\nimport whois\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    df_final = pd.DataFrame(columns = [\'ip\', \'org\', \'name\', \'domain_name\', \'address\', \'city\', \'state\', \'zipcode\', \'country\'])\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        # s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        # data = [[\'ip\', str(x[0])], [\'org\', str(arlookup[\'org\'])], [\'name\', str(arlookup[\'name\'])], [\'domain_name\', str(arlookup[\'domain_name\'])], [\'address\', str(arlookup[\'address\'])], [\'city\', str(arlookup[\'city\'])], [\'state\', str(arlookup[\'state\'])], [\'zipcode\', str(arlookup[\'zipcode\'])], [\'country\', str(arlookup[\'country\'])]]\n        data = [str(x[0]), str(arlookup[\'org\']), str(arlookup[\'name\']), str(arlookup[\'domain_name\']), str(arlookup[\'address\']), str(arlookup[\'city\']), str(arlookup[\'state\']), str(arlookup[\'zipcode\']), str(arlookup[\'country\'])]\n        df_final.loc[index] = data\n    return df_final\n\nif __name__ == "__main__":\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    df_final = runwhois(df)\n    g.write(df_final.to_csv(index=False))\n    g.close()\ndef get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '2847e2b3-17b1-45fd-bdc5-cb15dc63ee35'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import pandas as pd
 import whois
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     df_final = pd.DataFrame(columns = ['ip', 'org', 'name', 'domain_name', 'address', 'city', 'state', 'zipcode', 'country'])
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         # s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         # data = [['ip', str(x[0])], ['org', str(arlookup['org'])], ['name', str(arlookup['name'])], ['domain_name', str(arlookup['domain_name'])], ['address', str(arlookup['address'])], ['city', str(arlookup['city'])], ['state', str(arlookup['state'])], ['zipcode', str(arlookup['zipcode'])], ['country', str(arlookup['country'])]]
         data = [str(x[0]), str(arlookup['org']), str(arlookup['name']), str(arlookup['domain_name']), str(arlookup['address']), str(arlookup['city']), str(arlookup['state']), str(arlookup['zipcode']), str(arlookup['country'])]
         df_final.loc[index] = data
     return df_final
 
 if __name__ == "__main__":
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     df_final = runwhois(df)
     g.write(df_final.to_csv(index=False))
     g.close()
 def get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2021-05-05,09:32:05 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 38.76ms
2021-05-05,09:32:05 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 18.89ms
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:32:05 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['prep_string_type']}}, 'script': 'import pandas as pd\ndef get_output_schema():\n\treturn \'2847e2b3-17b1-45fd-bdc5-cb15dc63ee35\'\ndef prep_string():\n\treturn [\'prep_string_type\']\ndef prep_bool():\n\treturn [\'prep_bool_type\']\ndef prep_int():\n\treturn [\'prep_int_type\']\ndef prep_decimal():\n    return [\'prep_decimal_type\']\ndef prep_date():\n\treturn [\'prep_date_type\']\ndef prep_datetime():\n\treturn [\'prep_datetime_type\']\nimport pandas as pd\nimport whois\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    df_final = pd.DataFrame(columns = [\'ip\', \'org\', \'name\', \'domain_name\', \'address\', \'city\', \'state\', \'zipcode\', \'country\'])\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        # s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        # data = [[\'ip\', str(x[0])], [\'org\', str(arlookup[\'org\'])], [\'name\', str(arlookup[\'name\'])], [\'domain_name\', str(arlookup[\'domain_name\'])], [\'address\', str(arlookup[\'address\'])], [\'city\', str(arlookup[\'city\'])], [\'state\', str(arlookup[\'state\'])], [\'zipcode\', str(arlookup[\'zipcode\'])], [\'country\', str(arlookup[\'country\'])]]\n        data = [str(x[0]), str(arlookup[\'org\']), str(arlookup[\'name\']), str(arlookup[\'domain_name\']), str(arlookup[\'address\']), str(arlookup[\'city\']), str(arlookup[\'state\']), str(arlookup[\'zipcode\']), str(arlookup[\'country\'])]\n        df_final.loc[index] = data\n    return df_final\n\nif __name__ == "__main__":\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    df_final = runwhois(df)\n    g.write(df_final.to_csv(index=False))\n    g.close()\ndef get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):\n    import inspect\n    if len(inspect.getfullargspec(get_output_schema).args) == 0:\n        return get_output_schema()\n    else:\n        return get_output_schema(df)\nresult_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))\nreturn result_schema_output.to_dict(orient=\'split\') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output'}'...
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return '2847e2b3-17b1-45fd-bdc5-cb15dc63ee35'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 import pandas as pd
 import whois
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     df_final = pd.DataFrame(columns = ['ip', 'org', 'name', 'domain_name', 'address', 'city', 'state', 'zipcode', 'country'])
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         # s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         # data = [['ip', str(x[0])], ['org', str(arlookup['org'])], ['name', str(arlookup['name'])], ['domain_name', str(arlookup['domain_name'])], ['address', str(arlookup['address'])], ['city', str(arlookup['city'])], ['state', str(arlookup['state'])], ['zipcode', str(arlookup['zipcode'])], ['country', str(arlookup['country'])]]
         data = [str(x[0]), str(arlookup['org']), str(arlookup['name']), str(arlookup['domain_name']), str(arlookup['address']), str(arlookup['city']), str(arlookup['state']), str(arlookup['zipcode']), str(arlookup['country'])]
         df_final.loc[index] = data
     return df_final
 
 if __name__ == "__main__":
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     df_final = runwhois(df)
     g.write(df_final.to_csv(index=False))
     g.close()
 def get_output_schema_fb719f308c254b8eb03f04c532b202af(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_fb719f308c254b8eb03f04c532b202af(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2021-05-05,09:32:05 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 17.27ms
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2021-05-05,09:32:05 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2021-05-05,09:32:05 [DEBUG] (state.py:state:635): Returning value ''
2021-05-05,09:32:05 [DEBUG] (base_handler.py:base_handler:115): Processing POST request '{'data': {'_arg1': {'F1': ['23.66.114.201', '45.33.23.183', '45.60.44.73']}}, 'script': 'import pandas as pd\nimport pandas as pd\nimport whois\n\ndef get_output_schema():\n    return pd.DataFrame({\n        \'ip\': prep_string(),\n        \'org\': prep_string(),\n        \'name\': prep_string(),\n        \'domain_name\': prep_string(),\n        \'address\': prep_string(),\n        \'city\': prep_string(),\n        \'state\': prep_string(),\n        \'zipcode\': prep_string(),\n        \'country\': prep_string()\n    })\n\ndef runwhois(df):\n    df_final = pd.DataFrame(columns = [\'ip\', \'org\', \'name\', \'domain_name\', \'address\', \'city\', \'state\', \'zipcode\', \'country\'])\n    arlookup = []\n    for index, x in df.iterrows():  \n        arlookup = whois.whois(x[0])\n        # s = str(x[0]) + \'; \' + str(arlookup[\'org\']) + \'; \' + str(arlookup[\'name\']) + \'; \' + str(arlookup[\'domain_name\']) + \'; \' + str(arlookup[\'address\']) + \'; \' + str(arlookup[\'city\']) + \'; \' + str(arlookup[\'state\']) + \'; \' + str(arlookup[\'zipcode\']) + \'; \' + str(arlookup[\'country\']) + \'\\n\'\n        # data = [[\'ip\', str(x[0])], [\'org\', str(arlookup[\'org\'])], [\'name\', str(arlookup[\'name\'])], [\'domain_name\', str(arlookup[\'domain_name\'])], [\'address\', str(arlookup[\'address\'])], [\'city\', str(arlookup[\'city\'])], [\'state\', str(arlookup[\'state\'])], [\'zipcode\', str(arlookup[\'zipcode\'])], [\'country\', str(arlookup[\'country\'])]]\n        data = [str(x[0]), str(arlookup[\'org\']), str(arlookup[\'name\']), str(arlookup[\'domain_name\']), str(arlookup[\'address\']), str(arlookup[\'city\']), str(arlookup[\'state\']), str(arlookup[\'zipcode\']), str(arlookup[\'country\'])]\n        df_final.loc[index] = data\n    return df_final\n\nif __name__ == "__main__":\n    df = pd.read_csv(\'trace.txt\', header=None)\n    g = open(\'data.txt\',\'w\')\n    df_final = runwhois(df)\n    g.write(df_final.to_csv(index=False))\n    g.close()\nexecution_result = runwhois(pd.DataFrame(_arg1))\nreturn execution_result.to_dict(orient=\'list\') if isinstance(execution_result, pd.DataFrame) else execution_result\n'}'...
2021-05-05,09:32:05 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 import pandas as pd
 import whois
 
 def get_output_schema():
     return pd.DataFrame({
         'ip': prep_string(),
         'org': prep_string(),
         'name': prep_string(),
         'domain_name': prep_string(),
         'address': prep_string(),
         'city': prep_string(),
         'state': prep_string(),
         'zipcode': prep_string(),
         'country': prep_string()
     })
 
 def runwhois(df):
     df_final = pd.DataFrame(columns = ['ip', 'org', 'name', 'domain_name', 'address', 'city', 'state', 'zipcode', 'country'])
     arlookup = []
     for index, x in df.iterrows():  
         arlookup = whois.whois(x[0])
         # s = str(x[0]) + '; ' + str(arlookup['org']) + '; ' + str(arlookup['name']) + '; ' + str(arlookup['domain_name']) + '; ' + str(arlookup['address']) + '; ' + str(arlookup['city']) + '; ' + str(arlookup['state']) + '; ' + str(arlookup['zipcode']) + '; ' + str(arlookup['country']) + '\n'
         # data = [['ip', str(x[0])], ['org', str(arlookup['org'])], ['name', str(arlookup['name'])], ['domain_name', str(arlookup['domain_name'])], ['address', str(arlookup['address'])], ['city', str(arlookup['city'])], ['state', str(arlookup['state'])], ['zipcode', str(arlookup['zipcode'])], ['country', str(arlookup['country'])]]
         data = [str(x[0]), str(arlookup['org']), str(arlookup['name']), str(arlookup['domain_name']), str(arlookup['address']), str(arlookup['city']), str(arlookup['state']), str(arlookup['zipcode']), str(arlookup['country'])]
         df_final.loc[index] = data
     return df_final
 
 if __name__ == "__main__":
     df = pd.read_csv('trace.txt', header=None)
     g = open('data.txt','w')
     df_final = runwhois(df)
     g.write(df_final.to_csv(index=False))
     g.close()
 execution_result = runwhois(pd.DataFrame(_arg1))
 return execution_result.to_dict(orient='list') if isinstance(execution_result, pd.DataFrame) else execution_result

2021-05-05,09:32:07 [INFO] (web.py:web:2239): 200 POST /evaluate (127.0.0.1) 1844.13ms
